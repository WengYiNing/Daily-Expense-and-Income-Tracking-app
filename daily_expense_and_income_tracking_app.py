# -*- coding: utf-8 -*-
"""Daily Expense and Income Tracking app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wk4AyjN9ASZW3-1OEUdT6_Zty5MLOJTJ
"""

import ipywidgets as widgets
from IPython.display import display, clear_output
from ipywidgets import VBox
import matplotlib.pyplot as plt

from IPython.display import display, clear_output, HTML
from ipywidgets import widgets, VBox
import matplotlib.pyplot as plt

#Define the update_main_menu function.
def update_main_menu():
    clear_output()
    display(widgets.VBox([button_record, button_view, button_budget], layout=widgets.Layout(align_items='center', justify_content='center')))

from IPython.core.display import HTML
from IPython.display import display, HTML
from ipywidgets import widgets


# Custom CSS for styling
custom_css = """
<style>
    body {
        font-family: 'Arial', sans-serif;
        background-color: #f4f4f4;
        margin: 0;
    }
    .button-style {
        background-color: #4CAF50;
        border: none;
        color: white;
        padding: 10px 20px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 5px;
    }
    .label-style {
        font-size: 18px;
        margin-bottom: 5px;
    }
    .text-input-style {
        padding: 8px;
        font-size: 16px;
        border-radius: 5px;
    }
    .output-style {
        border: 2px solid #4CAF50;
        padding: 10px;
        border-radius: 5px;
        margin-top: 10px;
        font-size: 16px;
    }
</style>
"""

# Expense data
expense_categories = []
expense_amounts = []

# Display custom CSS
display(HTML(custom_css))

# Main menu buttons
button_record = widgets.Button(description="Record Expense", layout=widgets.Layout(width='200px', height='40px'), style={'button_color': '#4CAF50'})
button_view = widgets.Button(description="View Expense Records", layout=widgets.Layout(width='200px', height='40px'), style={'button_color': '#4CAF50'})
button_budget = widgets.Button(description="Budget Analysis", layout=widgets.Layout(width='200px', height='40px'), style={'button_color': '#4CAF50'})

# Record page widgets
label_category = widgets.Label(value="Expense Category:", style={'description_width': 'initial'}, layout=widgets.Layout(margin='0 0 10px 0'))
entry_category = widgets.Text(layout=widgets.Layout(width='100%', margin='0 0 10px 0'))
label_amount = widgets.Label(value="Expense Amount:", style={'description_width': 'initial'}, layout=widgets.Layout(margin='0 0 10px 0'))
entry_amount = widgets.FloatText(layout=widgets.Layout(width='100%', margin='0 0 10px 0'))
button_record_expense = widgets.Button(description="Record Expense", layout=widgets.Layout(width='200px', height='40px'), style={'button_color': '#4CAF50'})
button_go_back_record = widgets.Button(description="Go Back", layout=widgets.Layout(width='200px', height='40px'), style={'button_color': '#e74c3c'})

# View page widgets
result_text = widgets.Output(layout=widgets.Layout(border='2px solid #4CAF50', padding='10px', border_radius='5px', margin_top='10px'))
button_go_back_view = widgets.Button(description="Go Back", layout=widgets.Layout(width='200px', height='40px'), style={'button_color': '#e74c3c'})

# Budget page widgets
label_budget = widgets.Label(value="Total Budget:", style={'description_width': 'initial'}, layout=widgets.Layout(margin='0 0 10px 0'))
entry_budget = widgets.FloatText(layout=widgets.Layout(width='100%', margin='0 0 10px 0'))
button_budget_analysis = widgets.Button(description="Budget Analysis", layout=widgets.Layout(width='200px', height='40px'), style={'button_color': '#4CAF50'})
result_text_budget = widgets.Output(layout=widgets.Layout(border='2px solid #4CAF50', padding='10px', border_radius='5px', margin_top='10px'))
button_go_back_budget = widgets.Button(description="Go Back", layout=widgets.Layout(width='200px', height='40px'), style={'button_color': '#e74c3c'})

#Define category options.
expense_categories_options = ['Food', 'Clothing', 'Accommodation', 'Transportation', 'Entertainment', 'Health', 'Others']

# Record page widgets
label_category = widgets.Label(value="Expense Category:", style={'description_width': 'initial'}, layout=widgets.Layout(margin='0 0 10px 0'))

#Utilize a dropdown menu.
entry_category = widgets.Dropdown(options=expense_categories_options, layout=widgets.Layout(width='100%', margin='0 0 10px 0'))

label_amount = widgets.Label(value="Expense Amount:", style={'description_width': 'initial'}, layout=widgets.Layout(margin='0 0 10px 0'))
entry_amount = widgets.FloatText(layout=widgets.Layout(width='100%', margin='0 0 10px 0'))
button_record_expense = widgets.Button(description="Record Expense", layout=widgets.Layout(width='200px', height='40px'), style={'button_color': '#4CAF50'})
button_go_back_record = widgets.Button(description="Go Back", layout=widgets.Layout(width='200px', height='40px'), style={'button_color': '#e74c3c'})

def record_expense():
    category = entry_category.value
    amount = entry_amount.value

    if category and amount:
        expense_categories.append(category)
        expense_amounts.append(amount)
        print("Expense recorded successfully.")
        entry_category.value = expense_categories_options[0]  #Reset the dropdown menu to its default value.
        entry_amount.value = 0.0
    else:
        print("Please enter both expense category and amount.")

def budget_analysis():
    total_budget = entry_budget.value
    total_expense = sum(expense_amounts)
    remaining_budget = total_budget - total_expense

    result_text_budget.clear_output(wait=True)  #Clear the output area.

    with result_text_budget:  #Use a with block to ensure proper display.
        if remaining_budget >= 0:
            print(f"You have spent {total_expense}. Remaining budget: {remaining_budget}")
        else:
            print(f"You have spent {total_expense} . Exceeded budget: {abs(remaining_budget)}")

# Set up button click events
def on_record_button_click(b):
    update_main_menu()
    display(record_layout)

def on_view_button_click(b):
    update_main_menu()
    display(view_layout)
    view_expense_records()

def on_budget_button_click(b):
    update_main_menu()
    display(budget_layout)

def on_record_expense_button_click(b):
    record_expense()

def on_go_back_record_button_click(b):
    update_main_menu()

def on_go_back_view_button_click(b):
    update_main_menu()

def on_budget_analysis_button_click(b):
    budget_analysis()

def on_go_back_budget_button_click(b):
    update_main_menu()

button_record.on_click(on_record_button_click)
button_view.on_click(on_view_button_click)
button_budget.on_click(on_budget_button_click)
button_record_expense.on_click(on_record_expense_button_click)
button_go_back_record.on_click(on_go_back_record_button_click)
button_go_back_view.on_click(on_go_back_view_button_click)
button_budget_analysis.on_click(on_budget_analysis_button_click)
button_go_back_budget.on_click(on_go_back_budget_button_click)

# Function to display pie chart for Expense Amount and Expense Category
def view_expense_records():
    clear_output()

    # Display pie chart for Expense Amount and Expense Category
    if expense_categories:
        fig, ax = plt.subplots(figsize=(8, 6))

        # Custom colors for the pie chart
        colors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#c2c2f0', '#ffb3e6']

        # Plot the pie chart
        _, _, autotexts = ax.pie(expense_amounts, labels=expense_categories, autopct='%1.1f%%', startangle=90, colors=colors, wedgeprops={'edgecolor': 'black'}, textprops={'fontsize': 12})

        # Add a legend with custom labels
        ax.legend(expense_categories, loc='lower left', bbox_to_anchor=(1, 0, 0.5, 1), fontsize=12)

        # Set aspect ratio to be equal so that pie is drawn as a circle
        ax.axis('equal')

        # Add percentage labels inside the pie chart
        for autotext in autotexts:
            autotext.set_color('white')

        # Calculate total expense
        total_expense = sum(expense_amounts)

        # Add total expense label
        ax.text(0, 0, f"Total Expense: {total_expense}", fontsize=12, ha='center', weight='bold')

        plt.title('Expense Breakdown by Category', fontsize=14)
        plt.show()
    else:
        print("No expense records available.")

    # Display back button
    display(button_go_back_view)

# Main menu layout
main_menu_layout = widgets.VBox([button_record, button_view, button_budget], layout=widgets.Layout(align_items='center', justify_content='center'))

# Record page layout
record_layout = widgets.VBox([label_category, entry_category, label_amount, entry_amount, button_record_expense, button_go_back_record], layout=widgets.Layout(align_items='center', justify_content='center'))

# View page layout
view_layout = widgets.VBox([result_text, button_go_back_view], layout=widgets.Layout(align_items='center', justify_content='center'))

# Budget page layout
budget_layout = widgets.VBox([label_budget, entry_budget, button_budget_analysis, result_text_budget, button_go_back_budget], layout=widgets.Layout(align_items='center', justify_content='center'))

# Display the main menu
update_main_menu()